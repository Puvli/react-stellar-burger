{"ast":null,"code":"// const config = {\n//   baseUrl: \"https://norma.nomoreparties.space/api\",\n//   headers: {\n//     Accept: \"application/json\",\n//     \"Content-Type\": \"application/json\",\n//   },\n// };\n\n// function checkResponse(res) {\n//   if (res.ok) {\n//     return res.json();\n//   } else {\n//     return Promise.reject(res.status);\n//   }\n// }\n\n// export function Api() {\n//   const getIngredients = () => {\n//     return fetch(`${config.baseUrl}/ingredients`, {\n//       headers: config.headers,\n//       method: \"GET\",\n//     }).then((res) => checkResponse(res));\n//   };\n\n//   return {getIngredients};\n// }\n\nconst baseUrl = 'https://norma.nomoreparties.space/api';\nconst headers = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\nconst checkResponse = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject({\n    status: res.status,\n    statusText: res.statusText\n  });\n};\nconst request = (path, options) => {\n  const url = baseUrl + path;\n  // принимает два аргумента: урл и объект опций, как и `fetch`\n  return fetch(url, options).then(checkResponse);\n};\nexport const Api = () => {\n  const getIngredients = () => {\n    return request('/ingredients', {\n      headers,\n      method: 'GET'\n    });\n  };\n  return {\n    getIngredients\n  };\n};\n_c = Api;\nvar _c;\n$RefreshReg$(_c, \"Api\");","map":{"version":3,"names":["baseUrl","headers","Accept","checkResponse","res","ok","json","Promise","reject","status","statusText","request","path","options","url","fetch","then","Api","getIngredients","method","_c","$RefreshReg$"],"sources":["D:/practicum/dev/stellar-burgers/src/utils/api.js"],"sourcesContent":["// const config = {\r\n//   baseUrl: \"https://norma.nomoreparties.space/api\",\r\n//   headers: {\r\n//     Accept: \"application/json\",\r\n//     \"Content-Type\": \"application/json\",\r\n//   },\r\n// };\r\n\r\n// function checkResponse(res) {\r\n//   if (res.ok) {\r\n//     return res.json();\r\n//   } else {\r\n//     return Promise.reject(res.status);\r\n//   }\r\n// }\r\n\r\n// export function Api() {\r\n//   const getIngredients = () => {\r\n//     return fetch(`${config.baseUrl}/ingredients`, {\r\n//       headers: config.headers,\r\n//       method: \"GET\",\r\n//     }).then((res) => checkResponse(res));\r\n//   };\r\n\r\n//   return {getIngredients};\r\n// }\r\n\r\n\r\nconst baseUrl = 'https://norma.nomoreparties.space/api';\r\nconst headers = {\r\n  Accept: 'application/json',\r\n  'Content-Type': 'application/json',\r\n};\r\n\r\nconst checkResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject({\r\n    status: res.status,\r\n    statusText: res.statusText,\r\n  });\r\n};\r\n\r\nconst request = (path, options) => {\r\n  const url = baseUrl + path;\r\n  // принимает два аргумента: урл и объект опций, как и `fetch`\r\n  return fetch(url, options).then(checkResponse)\r\n}\r\n\r\nexport const Api = () => {\r\n  const getIngredients = () => {\r\n    return request('/ingredients', {\r\n      headers,\r\n      method: 'GET',\r\n    })\r\n  };\r\n\r\n  return {\r\n    getIngredients,\r\n  };\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,MAAMA,OAAO,GAAG,uCAAuC;AACvD,MAAMC,OAAO,GAAG;EACdC,MAAM,EAAE,kBAAkB;EAC1B,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC7B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAC;IACpBC,MAAM,EAAEL,GAAG,CAACK,MAAM;IAClBC,UAAU,EAAEN,GAAG,CAACM;EAClB,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EACjC,MAAMC,GAAG,GAAGd,OAAO,GAAGY,IAAI;EAC1B;EACA,OAAOG,KAAK,CAACD,GAAG,EAAED,OAAO,CAAC,CAACG,IAAI,CAACb,aAAa,CAAC;AAChD,CAAC;AAED,OAAO,MAAMc,GAAG,GAAGA,CAAA,KAAM;EACvB,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOP,OAAO,CAAC,cAAc,EAAE;MAC7BV,OAAO;MACPkB,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLD;EACF,CAAC;AACH,CAAC;AAACE,EAAA,GAXWH,GAAG;AAAA,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}